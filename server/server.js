// Generated by CoffeeScript 1.4.0
(function() {
  var Content, Twitter, bunyan, config, io, log, redis, respond, restify, routes, server, serverName, socketio, soohts, tweetCred, twtr;

  restify = require('restify');

  bunyan = require('bunyan');

  routes = require('./routes');

  socketio = require('socket.io');

  redis = require('node-redis');

  config = require('./config');

  soohts = config.soohts;

  tweetCred = config.twitterCreds;

  Content = soohts.models.Content;

  serverName = soohts.settings.db[0].toUpperCase() + soohts.settings.db.slice(1);

  config.soohts.init();

  Twitter = require('twit');

  twtr = new Twitter(tweetCred);

  log = bunyan.createLogger({
    name: serverName + ' RESTful Server',
    level: process.env.LOG_LEVEL || 'warn',
    stream: process.stdout,
    serializers: bunyan.stdSerializers
  });

  server = restify.createServer({
    name: serverName,
    log: log,
    version: '0.0.1'
  });

  server.use(restify.acceptParser(server.acceptable));

  server.use(restify.queryParser());

  server.use(restify.bodyParser());

  server.use(function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With, Content-Type");
    res.header("Access-Control-Allow-Methods", "POST, GET, PUT, DELETE, OPTIONS");
    return next();
  });

  server.on('after', restify.auditLogger({
    log: log
  }));

  respond = function(req, res, next) {
    return res.send("hello, " + req.params.name);
  };

  server.opts(/\.*/, function(req, res, next) {
    res.send(200);
    return next();
  });

  server.get("/", routes.index);

  server.get("/hello/:name", respond);

  server.head("/hello/:name", respond);

  io = socketio.listen(server);

  io.set('log level', 1);

  io.sockets.on('connection', function(socket) {
    var stream;
    socket.emit('news', '@alvaromuir says the server is ready.');
    stream = twtr.stream('statuses/filter', {
      track: 'billboards, out of home'
    });
    stream.on('tweet', function(tweet) {
      if (tweet) {
        return socket.emit('tweets', tweet);
      }
    });
    twtr.get('search/tweets', {
      q: 'billboards',
      count: 10
    }, function(err, tweets) {
      if (tweets) {
        return tweets.statuses.forEach(function(tweet) {
          return socket.emit('tweets', tweet);
        });
      }
    });
    return twtr.get('statuses/user_timeline', {
      screen_name: 'cbsoutdoor',
      count: 1
    }, function(err, tweet) {
      if (tweet) {
        return socket.emit('tweets', tweet[0]);
      }
    });
  });

  server.listen(8000, function() {
    return console.log('%s listening at %s', server.name, server.url);
  });

}).call(this);
